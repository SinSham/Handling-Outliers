{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2080558,"sourceType":"datasetVersion","datasetId":1247358},{"sourceId":8811217,"sourceType":"datasetVersion","datasetId":5299972}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**Handling Outliers in Two Datasets**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-28T13:50:10.794429Z","iopub.execute_input":"2024-06-28T13:50:10.794867Z","iopub.status.idle":"2024-06-28T13:50:11.803312Z","shell.execute_reply.started":"2024-06-28T13:50:10.794831Z","shell.execute_reply":"2024-06-28T13:50:11.802274Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"titanic = pd.read_csv('/kaggle/input/data-science-day1-titanic/DSB_Day1_Titanic_train.csv')","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.805102Z","iopub.execute_input":"2024-06-28T13:50:11.805601Z","iopub.status.idle":"2024-06-28T13:50:11.821225Z","shell.execute_reply.started":"2024-06-28T13:50:11.805568Z","shell.execute_reply":"2024-06-28T13:50:11.820149Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"titanic.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.822544Z","iopub.execute_input":"2024-06-28T13:50:11.822953Z","iopub.status.idle":"2024-06-28T13:50:11.844770Z","shell.execute_reply.started":"2024-06-28T13:50:11.822914Z","shell.execute_reply":"2024-06-28T13:50:11.843459Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"titanic.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.847166Z","iopub.execute_input":"2024-06-28T13:50:11.847553Z","iopub.status.idle":"2024-06-28T13:50:11.854564Z","shell.execute_reply.started":"2024-06-28T13:50:11.847495Z","shell.execute_reply":"2024-06-28T13:50:11.853451Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(891, 12)"},"metadata":{}}]},{"cell_type":"code","source":"titanic.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.855867Z","iopub.execute_input":"2024-06-28T13:50:11.856230Z","iopub.status.idle":"2024-06-28T13:50:11.893659Z","shell.execute_reply.started":"2024-06-28T13:50:11.856202Z","shell.execute_reply":"2024-06-28T13:50:11.892568Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"titanic.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.895179Z","iopub.execute_input":"2024-06-28T13:50:11.895654Z","iopub.status.idle":"2024-06-28T13:50:11.909617Z","shell.execute_reply.started":"2024-06-28T13:50:11.895612Z","shell.execute_reply":"2024-06-28T13:50:11.908452Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Using Inter-Quartile Range to find the outliers**","metadata":{}},{"cell_type":"code","source":"def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.911023Z","iopub.execute_input":"2024-06-28T13:50:11.911376Z","iopub.status.idle":"2024-06-28T13:50:11.921608Z","shell.execute_reply.started":"2024-06-28T13:50:11.911347Z","shell.execute_reply":"2024-06-28T13:50:11.920173Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"**Function to detect if outliers are present in a column**","metadata":{}},{"cell_type":"code","source":"def check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.923065Z","iopub.execute_input":"2024-06-28T13:50:11.923464Z","iopub.status.idle":"2024-06-28T13:50:11.932827Z","shell.execute_reply.started":"2024-06-28T13:50:11.923427Z","shell.execute_reply":"2024-06-28T13:50:11.931759Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"**Finding the type of columns as 'Categorical', 'Numerical', 'Cardinal'**","metadata":{}},{"cell_type":"code","source":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\" and col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f\"cat_cols: {len(cat_cols)}\")\n    print(f\"num_cols: {len(num_cols)}\")\n    print(f\"cat_but_car: {len(cat_but_car)}\")\n    print(f\"num_but_cat: {len(num_but_cat)}\")\n\n    return cat_cols, num_cols, cat_but_car\n","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.934320Z","iopub.execute_input":"2024-06-28T13:50:11.935090Z","iopub.status.idle":"2024-06-28T13:50:11.945359Z","shell.execute_reply.started":"2024-06-28T13:50:11.935050Z","shell.execute_reply":"2024-06-28T13:50:11.944118Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"cat_cols, num_cols, cat_but_car = grab_col_names(titanic)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.950327Z","iopub.execute_input":"2024-06-28T13:50:11.950711Z","iopub.status.idle":"2024-06-28T13:50:11.965120Z","shell.execute_reply.started":"2024-06-28T13:50:11.950680Z","shell.execute_reply":"2024-06-28T13:50:11.963827Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Observations: 891\nVariables: 12\ncat_cols: 6\nnum_cols: 3\ncat_but_car: 3\nnum_but_cat: 4\n","output_type":"stream"}]},{"cell_type":"code","source":"num_cols = [col for col in num_cols if col != \"PassengerId\"]\nprint(num_cols)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.966680Z","iopub.execute_input":"2024-06-28T13:50:11.967057Z","iopub.status.idle":"2024-06-28T13:50:11.973720Z","shell.execute_reply.started":"2024-06-28T13:50:11.967023Z","shell.execute_reply":"2024-06-28T13:50:11.972330Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"['Age', 'Fare']\n","output_type":"stream"}]},{"cell_type":"code","source":"def grab_outliers(dataframe, col_name, outlier_index=False, f = 5):\n    low, up = outlier_thresholds(dataframe, col_name)\n\n    if dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))].shape[0] > 10:\n        print(dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))].head(f))\n    else:\n        print(dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))])\n\n    if outlier_index:\n        out_index = dataframe[((dataframe[col_name] < low) | (dataframe[col_name] > up))].index\n        return out_index","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.975047Z","iopub.execute_input":"2024-06-28T13:50:11.975443Z","iopub.status.idle":"2024-06-28T13:50:11.985033Z","shell.execute_reply.started":"2024-06-28T13:50:11.975414Z","shell.execute_reply":"2024-06-28T13:50:11.983830Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"def remove_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    df_without_outliers = dataframe[~((dataframe[col_name] < low_limit) | (dataframe[col_name] > up_limit))]\n    return df_without_outliers","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.986352Z","iopub.execute_input":"2024-06-28T13:50:11.986733Z","iopub.status.idle":"2024-06-28T13:50:11.995817Z","shell.execute_reply.started":"2024-06-28T13:50:11.986704Z","shell.execute_reply":"2024-06-28T13:50:11.994719Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:11.997184Z","iopub.execute_input":"2024-06-28T13:50:11.997569Z","iopub.status.idle":"2024-06-28T13:50:12.008063Z","shell.execute_reply.started":"2024-06-28T13:50:11.997534Z","shell.execute_reply":"2024-06-28T13:50:12.006709Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"for col in num_cols:\n    print(col, check_outlier(titanic, col))","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:12.009389Z","iopub.execute_input":"2024-06-28T13:50:12.009788Z","iopub.status.idle":"2024-06-28T13:50:12.030165Z","shell.execute_reply.started":"2024-06-28T13:50:12.009751Z","shell.execute_reply":"2024-06-28T13:50:12.029021Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Age True\nFare True\n","output_type":"stream"}]},{"cell_type":"code","source":"for col in num_cols:\n    print(grab_outliers(titanic, col))","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:12.031730Z","iopub.execute_input":"2024-06-28T13:50:12.032081Z","iopub.status.idle":"2024-06-28T13:50:12.056236Z","shell.execute_reply.started":"2024-06-28T13:50:12.032053Z","shell.execute_reply":"2024-06-28T13:50:12.055095Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"     PassengerId  Survived  Pclass                            Name   Sex  \\\n33            34         0       2           Wheadon, Mr. Edward H  male   \n54            55         0       1  Ostby, Mr. Engelhart Cornelius  male   \n96            97         0       1       Goldschmidt, Mr. George B  male   \n116          117         0       3            Connors, Mr. Patrick  male   \n280          281         0       3                Duane, Mr. Frank  male   \n\n      Age  SibSp  Parch      Ticket     Fare Cabin Embarked  \n33   66.0      0      0  C.A. 24579  10.5000   NaN        S  \n54   65.0      0      1      113509  61.9792   B30        C  \n96   71.0      0      0    PC 17754  34.6542    A5        C  \n116  70.5      0      0      370369   7.7500   NaN        Q  \n280  65.0      0      0      336439   7.7500   NaN        Q  \nNone\n    PassengerId  Survived  Pclass  \\\n1             2         1       1   \n27           28         0       1   \n31           32         1       1   \n34           35         0       1   \n52           53         1       1   \n\n                                                 Name     Sex   Age  SibSp  \\\n1   Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n27                     Fortune, Mr. Charles Alexander    male  19.0      3   \n31     Spencer, Mrs. William Augustus (Marie Eugenie)  female   NaN      1   \n34                            Meyer, Mr. Edgar Joseph    male  28.0      1   \n52           Harper, Mrs. Henry Sleeper (Myna Haxtun)  female  49.0      1   \n\n    Parch    Ticket      Fare        Cabin Embarked  \n1       0  PC 17599   71.2833          C85        C  \n27      2     19950  263.0000  C23 C25 C27        S  \n31      0  PC 17569  146.5208          B78        C  \n34      0  PC 17604   82.1708          NaN        C  \n52      0  PC 17572   76.7292          D33        C  \nNone\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Removing Outliers**","metadata":{}},{"cell_type":"code","source":"for col in num_cols:\n    titanic = remove_outlier(titanic,col)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:50:12.057424Z","iopub.execute_input":"2024-06-28T13:50:12.057734Z","iopub.status.idle":"2024-06-28T13:50:12.068946Z","shell.execute_reply.started":"2024-06-28T13:50:12.057708Z","shell.execute_reply":"2024-06-28T13:50:12.067909Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"**Replacing Outliers with threshold values**","metadata":{}},{"cell_type":"code","source":"titanic = pd.read_csv('/kaggle/input/data-science-day1-titanic/DSB_Day1_Titanic_train.csv')","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:52:05.477946Z","iopub.execute_input":"2024-06-28T13:52:05.478324Z","iopub.status.idle":"2024-06-28T13:52:05.494286Z","shell.execute_reply.started":"2024-06-28T13:52:05.478297Z","shell.execute_reply":"2024-06-28T13:52:05.492765Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"for col in num_cols:\n    replace_with_thresholds(titanic, col)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:52:43.065555Z","iopub.execute_input":"2024-06-28T13:52:43.066046Z","iopub.status.idle":"2024-06-28T13:52:43.081644Z","shell.execute_reply.started":"2024-06-28T13:52:43.066006Z","shell.execute_reply":"2024-06-28T13:52:43.080044Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"for col in num_cols:\n    print(col, check_outlier(titanic, col))","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:53:00.703718Z","iopub.execute_input":"2024-06-28T13:53:00.704172Z","iopub.status.idle":"2024-06-28T13:53:00.720100Z","shell.execute_reply.started":"2024-06-28T13:53:00.704138Z","shell.execute_reply":"2024-06-28T13:53:00.718473Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Age False\nFare False\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.neighbors import LocalOutlierFactor\n\ntitanic = titanic.dropna(subset=num_cols)\ntitanic['LOF_outlier'] = clf.fit_predict(titanic[num_cols])\ntitanic_scores = clf.negative_outlier_factor_\nprint(titanic_scores)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:58:02.425153Z","iopub.execute_input":"2024-06-28T13:58:02.425846Z","iopub.status.idle":"2024-06-28T13:58:02.455673Z","shell.execute_reply.started":"2024-06-28T13:58:02.425809Z","shell.execute_reply":"2024-06-28T13:58:02.454131Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"[-1.00066553 -1.00110123 -0.98739341 -1.00300291 -1.03187358 -1.38817817\n -0.99122615 -1.12024378 -1.11251499 -1.02126248 -1.1087688  -0.99380645\n -1.13334913 -1.411044   -1.12457928 -0.97093279 -1.16473585 -0.97341024\n -1.03889058 -1.28527515 -1.33224863 -1.01048853 -1.13875381 -1.10667655\n -1.00868242 -1.38849136 -1.17175853 -1.08125024 -0.9808391  -1.24093089\n -1.59688324 -1.01599566 -1.08094862 -1.33479172 -0.97466339 -1.24449314\n -1.19642061 -0.98358648 -0.98959823 -0.96555783 -1.41589198 -1.23339712\n -1.05787109 -0.98314817 -1.16908892 -1.00151258 -1.00110123 -1.10428471\n -0.97245322 -1.15151528 -0.97306866 -1.02897475 -1.06776989 -1.23586797\n -1.11802729 -0.97764353 -0.99962829 -1.31388254 -0.97359149 -1.00637101\n -1.00071336 -1.19064418 -1.06755605 -1.04390891 -1.26171229 -1.13733507\n -1.15671907 -0.95523572 -1.00554695 -1.03399178 -0.98934537 -1.04380792\n -1.16432082 -1.22535232 -1.22599652 -0.94534136 -1.00894874 -0.97140232\n -1.00674855 -0.97764353 -1.05146766 -1.08756707 -1.00674855 -0.9869168\n -1.08339422 -1.1657181  -1.37110358 -1.00616558 -1.35397827 -1.24886021\n -0.98015638 -1.41779462 -1.08225604 -0.98013936 -1.0014756  -0.97764353\n -1.02112003 -1.04740712 -0.98876817 -1.8348937  -1.05001901 -1.02640383\n -1.05755357 -1.10434278 -1.07777048 -0.96555783 -1.03758821 -1.04816215\n -1.16584498 -1.01506417 -1.18823144 -0.98013936 -0.99496114 -1.05632375\n -1.15373984 -1.24798663 -1.28545164 -1.07230978 -1.04839993 -0.97700109\n -1.06522263 -1.03694636 -0.94337875 -1.07511401 -1.10630232 -0.98711987\n -1.21583909 -0.94419897 -1.12037537 -1.10756656 -0.98921149 -1.10135204\n -1.34161369 -1.02330252 -0.99448747 -1.42117663 -1.15634985 -0.98181932\n -1.10494958 -0.98015638 -1.06474012 -0.99081362 -1.03635115 -0.9979686\n -2.4978068  -0.98626601 -1.32126557 -0.97631164 -0.99645783 -1.10217165\n -1.08065516 -1.05270259 -1.27307416 -0.97466339 -0.9863676  -1.00714798\n -1.14163267 -1.01576326 -1.01930335 -1.10144538 -1.12756063 -1.03792721\n -0.98820433 -1.14613409 -1.11156468 -1.18575895 -1.21581958 -1.0900061\n -1.06781193 -1.10864206 -1.00066553 -0.9979686  -1.11172237 -1.07048702\n -1.01167723 -1.12205981 -1.14024795 -1.19703968 -0.98667122 -1.06299057\n -1.00110123 -1.36084385 -1.35417746 -0.98636304 -1.29617878 -0.94747959\n -1.03140116 -1.18682452 -0.98844894 -1.29114287 -0.99722984 -0.96975136\n -1.35417746 -1.07137805 -1.15151528 -1.0076325  -0.92888027 -1.16566686\n -0.97844597 -1.0235087  -1.01726233 -1.07049722 -1.14874451 -1.14277042\n -1.16069531 -1.18821195 -1.02630751 -1.17061125 -0.94747959 -1.04858547\n -0.99841202 -0.96623323 -1.97671481 -1.08131925 -1.1791948  -0.97844597\n -1.14163267 -0.94747959 -5.8491443  -1.21402255 -1.0256737  -1.37771413\n -1.02593934 -0.9861592  -1.18499578 -1.41779462 -1.00674855 -1.20397095\n -0.97033516 -1.0516559  -1.09600762 -1.00635947 -1.06522263 -0.99496114\n -1.06968057 -1.10667655 -1.04204335 -1.225377   -0.99585893 -1.19065144\n -2.8451541  -0.9799762  -5.59050671 -2.98980096 -1.26494126 -0.96479501\n -1.26622417 -0.98013936 -1.1607875  -0.99210391 -1.00674855 -0.99997019\n -0.98736034 -1.06633762 -1.0534584  -1.11172237 -1.09571387 -1.00066553\n -1.07092648 -1.00578048 -1.15110946 -0.97607064 -1.29241015 -1.04512599\n -1.09737684 -1.75642817 -1.00263822 -1.00110123 -1.33733912 -1.16600987\n -1.14998632 -1.02671673 -1.38486534 -0.98871893 -0.98013936 -1.00159193\n -1.03758821 -1.04512599 -1.01930335 -1.08596262 -1.04276    -1.01576326\n -1.33799731 -1.33800794 -1.19214633 -1.10144538 -1.3580446  -1.0678022\n -1.0099946  -0.99259053 -1.06806991 -1.14007138 -0.92874266 -1.20840833\n -0.98013936 -1.32143453 -1.26218258 -0.97033516 -0.94337875 -0.99221007\n -1.00066553 -1.08644101 -3.24185186 -0.98463641 -1.21149543 -1.04771389\n -0.98098827 -1.00700194 -1.1607875  -1.53886227 -1.04512599 -1.23258286\n -0.97607064 -0.98357468 -1.00750837 -0.95523572 -1.1535998  -0.99469466\n -1.01085704 -0.9991873  -1.44130389 -1.0201738  -1.06592787 -0.98465313\n -1.35286761 -1.09587531 -1.09089521 -1.0985158  -1.06035053 -0.99969616\n -0.98350333 -1.04045456 -1.00361648 -1.21465187 -1.29617878 -0.9979686\n -1.02951714 -0.98372313 -1.03123997 -1.00911775 -1.25339836 -0.97623256\n -1.18469476 -0.98464783 -0.98767516 -1.00881843 -1.05745003 -1.29990812\n -1.50481718 -1.19264148 -1.2174928  -1.44140051 -1.24473679 -0.99679998\n -1.31842544 -0.97844597 -1.00159193 -2.71936285 -1.20563526 -0.9677641\n -1.00178568 -1.05247011 -0.99180646 -0.98483502 -0.98959823 -1.03117957\n -1.19619571 -1.0565722  -1.01307011 -1.07928252 -1.42461995 -1.05683055\n -1.09433599 -1.08156182 -0.99774316 -1.08370244 -0.98353729 -1.05947267\n -1.33225685 -1.0985158  -1.03796168 -0.99624336 -1.06091304 -1.18266768\n -1.06459422 -1.31400878 -0.99094516 -0.94747959 -1.09995988 -0.94419897\n -1.11023989 -1.02247084 -1.05879104 -1.52164842 -0.9808391  -0.98876817\n -0.99094516 -0.9981415  -1.10135204 -0.98361742 -1.09217979 -1.36064995\n -1.1607875  -0.97030639 -1.00396465 -1.46254932 -1.03140789 -0.97601938\n -1.07935549 -1.00192417 -1.27504088 -1.08054833 -0.97478912 -0.98016578\n -1.17061125 -1.00635947 -1.31302105 -1.00473534 -1.0565722  -1.06592787\n -1.11760431 -0.98871893 -1.04891548 -0.94754479 -0.96741547 -0.99645783\n -1.17061125 -1.06019495 -0.97607064 -0.98480011 -1.03739358 -0.9766009\n -0.9799762  -1.19264883 -1.18469476 -1.12003542 -1.12312573 -1.26494126\n -0.98485207 -1.00168753 -0.99498007 -1.14277042 -1.39992381 -0.99965111\n -1.15602589 -1.01196496 -1.00440455 -1.07989129 -0.97479197 -1.0813973\n -0.97926088 -1.27214597 -1.3886997  -0.97640085 -1.19703968 -1.22722957\n -1.03889058 -1.2986076  -0.98098827 -1.07342169 -0.99965111 -1.07049722\n -1.53819491 -1.1607875  -1.08301795 -1.20840833 -1.00616558 -1.13598267\n -0.96623323 -1.0555756  -0.97371337 -1.01182348 -1.66837611 -1.25306758\n -1.06798878 -1.00389165 -0.97709912 -1.07208729 -0.93917425 -1.04704424\n -1.21979145 -1.09571387 -1.13334913 -1.03187358 -0.98121312 -1.08628857\n -1.07334401 -1.22086511 -1.49312101 -0.97918167 -1.07652296 -1.18143876\n -0.98096423 -1.14760513 -1.14337022 -1.12683333 -0.97764353 -0.98639815\n -1.1916584  -1.07977346 -1.0694778  -0.97626931 -1.00159193 -0.98098827\n -0.97046524 -1.5664934  -0.98934537 -0.98013936 -0.95909839 -0.99774316\n -0.98959823 -0.97479197 -1.10834483 -1.02501055 -1.23821526 -0.99534651\n -1.15962915 -0.98013936 -1.08758361 -1.07587469 -1.14163267 -0.9799762\n -1.03445565 -0.98323329 -1.11522656 -0.99064252 -1.12205981 -1.03758821\n -1.00891815 -1.52960675 -0.99301268 -1.38849136 -1.03348022 -0.9926455\n -1.00048507 -1.28216706 -1.10701347 -0.97607064 -1.08644101 -1.24860855\n -1.13386886 -1.1947336  -1.24065093 -1.17910441 -1.34368855 -0.99218243\n -1.44803535 -1.26691042 -1.05305694 -0.97208858 -1.11959982 -1.05794868\n -1.00389165 -0.98959823 -1.01635419 -1.1607875  -0.97453793 -1.28654513\n -0.97820397 -0.98736034 -0.97909519 -1.100988   -1.01153438 -0.94337875\n -1.05234735 -1.17576925 -1.06361364 -1.05225653 -0.98482413 -1.00110123\n -1.21332116 -1.05739353 -1.01777917 -1.08779918 -1.03889058 -1.05779325\n -1.01117599 -1.09089521 -1.05456807 -1.02390592 -0.99019443 -1.16600987\n -1.15822769 -1.07587469 -1.07587469 -1.14258866 -1.24748884 -0.94747959\n -0.97607064 -0.97764353 -1.0802555  -1.00959382 -1.49329606 -1.21780972\n -0.9979686  -1.28387294 -1.01114106 -0.99752988 -1.11320072 -1.04937898\n -1.011947   -0.98931766 -1.05017139 -1.00674855 -1.24798663 -1.07928252\n -1.04045456 -1.00368233 -1.05764744 -0.97607064 -1.21581321 -0.97293352\n -0.96421283 -0.99221585 -1.45722065 -1.04420991 -1.10413799 -1.07745068\n -0.99423844 -1.06560506 -1.17441805 -1.79520802 -1.70225791 -1.047887\n -0.99441755 -0.97154973 -1.03343664 -0.98003154 -0.99010993 -1.04097731\n -1.16823242 -0.97861918 -1.08016359 -1.03474668 -0.97405594 -0.92874266\n -0.96358928 -1.03889058 -0.97046524 -1.85382227 -1.29029258 -1.1299662\n -1.01155578 -2.13130579 -0.9926455  -1.08016359 -0.99325147 -0.98659356\n -1.00896233 -1.09147842 -0.99440728 -0.97294246 -1.01438144 -1.51958315\n -1.01556178 -0.99814525 -0.96623323 -1.09374403 -2.14699139 -1.00082409\n -1.32169631 -1.19892392 -1.32078924 -1.32024861 -1.01177168 -1.00902843\n -1.02001371 -0.99965111 -1.04070234 -1.31388254 -0.99064252 -1.29708223\n -1.10299369 -1.17700225 -1.10135204 -1.01635419 -1.03228778 -1.22315051\n -0.98730882 -1.41738552 -1.09685337 -1.17025067 -0.99722984 -1.27502905\n -1.10428471 -1.04459254 -1.19757145 -1.12203234 -1.25402659 -1.02870811\n -1.01930335 -1.06522263 -0.98757814 -0.99755317 -1.15763111 -0.98639815\n -1.15799491 -1.58257203 -1.03718841 -0.99280007 -1.33824452 -1.35842663\n -0.97479197 -1.04184883 -1.02390592 -1.05755357 -1.35008095 -1.08100765\n -0.99441755 -1.0132297  -0.98667122 -1.20197443 -1.04989469 -0.98653283]\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_445/757002450.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  titanic['LOF_outlier'] = clf.fit_predict(titanic[num_cols])\n","output_type":"stream"}]},{"cell_type":"code","source":"print(np.sort(titanic_scores)[0:5])","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:58:43.220423Z","iopub.execute_input":"2024-06-28T13:58:43.221257Z","iopub.status.idle":"2024-06-28T13:58:43.227415Z","shell.execute_reply.started":"2024-06-28T13:58:43.221223Z","shell.execute_reply":"2024-06-28T13:58:43.226312Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"[-5.8491443  -5.59050671 -3.24185186 -2.98980096 -2.8451541 ]\n","output_type":"stream"}]},{"cell_type":"code","source":"scores = pd.DataFrame(np.sort(titanic_scores))\nscores.plot(stacked=True, xlim=[0, 20], style='.-')\nplt.show() ","metadata":{"execution":{"iopub.status.busy":"2024-06-28T13:59:08.676811Z","iopub.execute_input":"2024-06-28T13:59:08.677224Z","iopub.status.idle":"2024-06-28T13:59:09.004357Z","shell.execute_reply.started":"2024-06-28T13:59:08.677191Z","shell.execute_reply":"2024-06-28T13:59:09.002817Z"},"trusted":true},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"code","source":"th = np.sort(titanic_scores)[10]\nprint(th)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T14:00:11.133573Z","iopub.execute_input":"2024-06-28T14:00:11.134900Z","iopub.status.idle":"2024-06-28T14:00:11.141058Z","shell.execute_reply.started":"2024-06-28T14:00:11.134856Z","shell.execute_reply":"2024-06-28T14:00:11.139797Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"-1.8538222694348583\n","output_type":"stream"}]},{"cell_type":"code","source":"print(titanic[titanic_scores < th])\nprint(titanic.drop(axis=0, labels=titanic[titanic_scores < th].index).shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T14:01:44.367905Z","iopub.execute_input":"2024-06-28T14:01:44.368979Z","iopub.status.idle":"2024-06-28T14:01:44.385485Z","shell.execute_reply.started":"2024-06-28T14:01:44.368934Z","shell.execute_reply":"2024-06-28T14:01:44.384033Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"     PassengerId  Survived  Pclass                             Name     Sex  \\\n179          180         0       3              Leonard, Mr. Lionel    male   \n263          264         0       1            Harrison, Mr. William    male   \n271          272         1       3     Tornquist, Mr. William Henry    male   \n297          298         0       1     Allison, Miss. Helen Loraine  female   \n302          303         0       3  Johnson, Mr. William Cahoone Jr    male   \n305          306         1       1   Allison, Master. Hudson Trevor    male   \n378          379         0       3              Betros, Mr. Tannous    male   \n445          446         1       1        Dodge, Master. Washington    male   \n806          807         0       1           Andrews, Mr. Thomas Jr    male   \n822          823         0       1  Reuchlin, Jonkheer. John George    male   \n\n       Age  SibSp  Parch  Ticket     Fare    Cabin Embarked  LOF_outlier  \n179  36.00      0      0    LINE   0.0000      NaN        S           -1  \n263  40.00      0      0  112059   0.0000      B94        S           -1  \n271  25.00      0      0    LINE   0.0000      NaN        S           -1  \n297   2.00      1      2  113781  65.6344  C22 C26        S           -1  \n302  19.00      0      0    LINE   0.0000      NaN        S           -1  \n305   0.92      1      2  113781  65.6344  C22 C26        S           -1  \n378  20.00      0      0    2648   4.0125      NaN        C           -1  \n445   4.00      0      2   33638  65.6344      A34        S           -1  \n806  39.00      0      0  112050   0.0000      A36        S           -1  \n822  38.00      0      0   19972   0.0000      NaN        S           -1  \n(704, 13)\n","output_type":"stream"}]}]}